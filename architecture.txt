**Hydroleaf SaaS Solution Architecture Guide**

---

### Table of Contents

1. **Overview**
2. **High-Level Component Diagram**
3. **Multi-Tenant & Home-Use Modes**
4. **API Layer & Routers**
5. **Authentication & Authorization Flows**
6. **Database Schema & Data Models**
7. **Admin-Configurable Device Parameters**
8. **Core Services & Background Workers**
9. **Configuration & Environment**
10. **Deployment & Scalability**
11. **Error Handling & Monitoring**
12. **Appendix: Key Endpoints**

---

## 1. Overview

Hydroleaf is a cloud-native, multi-tenant SaaS platform for hydroponic/farm automation.  Users (admins and sub-users) can:

* Register one or more **Farms** ('Home' or commercial), each with geo-location (address, latitude, longitude).
* Attach multiple **Devices** and **Plants** to a Farm.
* Monitor sensors, schedule dosing, and process camera feeds per Farm.
* Manage subscriptions, activation keys, and billing per device or per-farm plan.
* Configure new device types and parameters via the Admin panel (no DB migrations needed).

All backend services use FastAPI, SQLAlchemy (async), and PostgreSQL (asyncpg).  Designed for HA, horizontal scaling, and secure tenant isolation.

## 2. High-Level Component Diagram

```
+-------------+      +----------------------+      +---------------------+
|  Web / SDK  | <--> |  FastAPI Gateway     | <--> |  Async Workers /    |
|  Clients    |      |  (Routers & Logic)   |      |  Background Tasks   |
+-------------+      +----------------------+      +---------------------+
        |                     |                             |
        v                     v                             v
   +---------+  SQL+AsyncPG  +---------------+   Queue   +--------------+
   |  Nginx  | -----------> |  PostgreSQL    | <-------> | Camera Queue |
   +---------+               +---------------+           +--------------+
                                   |                             |
                                   v                             v
                         +----------------------+     +--------------------------+
                         |   LLM Services       |     |  External Disease /      |
                         |  (Ollama / OpenAI)   |     |  Supply-Chain APIs       |
                         +----------------------+     +--------------------------+
```

## 3. Multi-Tenant & Home-Use Modes

* **Farm**: group of Devices & Plants, geo-tagged (address, lat, lon).  Owned by an AdminUser and shared with SubUsers.
* **Home Mode**: a single Farm with one device cluster.
* **Access**: AdminUser manages the Farm; SubUsers have scoped access (view/control).

## 4. API Layer & Routers

* **Auth**: `/api/v1/auth` → signup, login, JWT issuance.
* **Users**: `/api/v1/users` → profile, update.
* **Farms**: `/api/v1/farms` → CRUD with lat/lon, devices, plants listing.
* **Devices**: `/api/v1/devices` → register DOSING/SENSOR/VALVE/SWITCH, discover, list by farm.
* **Plants**: `/api/v1/plants` → CRUD by farm, get history, dosing-execution.
* **Subscriptions**: `/api/v1/subscriptions` → plans, redeem, list per user/farm.
* **Payments**: `/api/v1/payments` → order create/confirm/upload, admin approve/reject.
* **Cameras**: `/api/v1/cameras` → frame upload, streaming, reports.
* **Device-Comm**: `/device_comm` → unified token, OTA, telemetry, heartbeat.
* **Admin**: `/admin/*` → manage users, farms, devices, plans, activation keys, cloud keys, device parameter definitions.
* **Config**: `/api/v1/config` → system-info, dosing-profile management.
* **SupplyChain**: `/api/v1/supply-chain` → transport analysis.

## 5. Authentication & Authorization

* **JWT** for AdminUser/SubUser: OAuth2 with roles.
* **CloudKey** → device & camera token issuance, usage audits.
* **verify\_device\_token** & **verify\_camera\_token** dependencies.
* **get\_current\_user**, **get\_current\_admin**, **farm\_scoped\_access** dependencies enforce permissions.

## 6. Database Schema & Data Models

**Users & Roles**

```text
AdminUser { id, email, hashed_password, role='admin' }
SubUser   { id, email, hashed_password, role='subuser', parent_id → AdminUser }
UserProfile { user_id → AdminUser/SubUser, first_name, last_name, phone, address, city, state, country, postal_code }
```

**Farms**

```text
Farm {
  id,
  owner_id → AdminUser,
  name,
  address,
  latitude (float),
  longitude (float),
  created_at,
  updated_at
}
FarmMembers { farm_id → Farm, user_id → SubUser }  ← share farm
```

**Devices**

```text
Device {
  id (uuid),
  farm_id → Farm,
  name,
  mac_id,
  type (string key),
  http_endpoint,
  location_description,
  is_active,
  etc.
}
```

**Plants**

```text
Plant {
  id,
  farm_id → Farm,
  name,
  type,
  growth_stage,
  seeding_date,
  region,
  location_description,
  target_ph_min, target_ph_max,
  target_tds_min, target_tds_max,
  created_at, updated_at
}
```

**SensorReadings, DosingProfiles, Operations**
(as before, but scoped by `device_id` + `farm_id` via device)

**Subscriptions & Billing**
(as before, with optional `farm_id` for per-farm subscription plans)

**Cameras & Detections**
(as before, with `camera_id`, `farm_id` foreign key)

**CloudKeys & Tokens**
(as before)

## 7. Admin-Configurable Device Parameters

* **DeviceType** table:

```
DeviceTypeDefinition {
  key (string, PK),     // e.g. "dosing_unit"
  display_name,
  config_schema (JSON)  // JSON-schema for parameters (pumps, valves, switches)
}
```

* **DeviceParameters** table:

```
DeviceParameter {
  id,
  device_id → Device,
  param_key,
  param_value (Any JSON),
  created_at,
  updated_at
}
```

By storing `config_schema` in DB, Admin panel can CRUD device types, extend new parameters without migrations.

## 8. Core Services & Workers

* **CameraQueue** → YOLO inference, annotate, leaf-crops, clip segmentation.
* **offline\_watcher** → mark cameras offline.
* **DoseManager** + **DeviceController** → HTTP commands to devices.
* **LLM Services** → dosing plans (`build_dosing_prompt`), supply-chain analysis.

## 9. Configuration & Environment

(As before, no changes—add `FARM_SHARE_ENABLED`, etc.)

## 10. Deployment & Scalability

(No change.)

## 11. Error Handling & Monitoring

(As before.)

## 12. Appendix: Key Endpoints

(Provide updated cheat-sheet including `/api/v1/farms/*` and `/api/v1/plants` CRUD.)
